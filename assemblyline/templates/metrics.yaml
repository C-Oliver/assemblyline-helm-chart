apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-kibana
  labels:
    app: assemblyline
    component: kibana
spec:
  containers:
  - name: kibana
    image: docker.elastic.co/kibana/kibana:7.0.0
    env:
    - name: SERVER_NAME
      value: localhost
    - name: ELASTICSEARCH_HOSTS
      value: http://{{ .Release.Name }}-datastore:9200
    - name: SERVER_BASEPATH
      value: /kibana
    - name: SERVER_REWRITEBASEPATH
      value: "true"
    ports:
    - containerPort: 5601
    livenessProbe:
      httpGet:
        path: /kibana
        port: 5601
      periodSeconds: 30
      timeoutSeconds: 30
      failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-kibana
spec:
  selector:
    app: assemblyline
    component: kibana
  ports:
  - protocol: TCP
    port: 5601
    targetPort: 5601
---

apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-apm
  labels:
    app: assemblyline
    component: apm
spec:
  containers:
  - name: apm
    image: sgaroncse/apm-server:7.0.0
    env:
    - name: ES_HOSTS
      value: {{ .Release.Name }}-datastore:9200

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-apm
spec:
  selector:
    app: assemblyline
    component: apm
  ports:
  - protocol: TCP
    port: 8200
    targetPort: 8200
---



#  metricbeat:
#    image: docker.elastic.co/beats/metricbeat:7.0.0
#    user: root
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - /opt/alv4/alv4/dev/depends/config/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro
#    command: metricbeat -e --strict.perms=false
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#      kibana:
#        condition: service_healthy

---
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-metrics
  labels:
    app: assemblyline
    component: metrics
spec:
  containers:
    - name: al-metrics
      image: cccs/assemblyline-core:{{ .Values.coreVersion }}
      command: ['python', '-m', 'al_core.metrics.run_metrics_aggregator']
      volumeMounts:
        - name: al-config
          mountPath: /etc/assemblyline/
  volumes:
    - name: al-config
      configMap:
        name: {{ .Release.Name }}-global-config
        items:
          - key: config
            path: config.yml
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-metrics
spec:
  clusterIP: None  # AL services are headless, and communicate through redis
  selector:
    app: assemblyline
    component: metrics
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-heartbeat
  labels:
    app: assemblyline
    component: heartbeat
spec:
  containers:
    - name: al-heartbeat
      image: cccs/assemblyline-core:{{ .Values.coreVersion }}
      command: ['python', '-m', 'al_core.metrics.run_heartbeat_manager']
      volumeMounts:
        - name: al-config
          mountPath: /etc/assemblyline/
  volumes:
    - name: al-config
      configMap:
        name: {{ .Release.Name }}-global-config
        items:
          - key: config
            path: config.yml
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-heartbeat
spec:
  clusterIP: None  # AL services are headless, and communicate through redis
  selector:
    app: assemblyline
    component: heartbeat
