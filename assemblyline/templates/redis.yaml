# Create a POD/Service for non-persisted redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-volatile
  labels:
    app: assemblyline
    section: core
    component: redis-volatile
spec:
  replicas: 1
  revisionHistoryLimit: {{ .Values.revisionCount }}
  selector:
    matchLabels:
      app: assemblyline
      section: core
      component: redis-volatile
  template:
    metadata:
      labels:
        app: assemblyline
        section: core
        component: redis-volatile
    spec:
      priorityClassName: al-infra
      serviceAccountName: {{ .Values.coreServiceAccountName }}
      affinity:
        nodeAffinity:
          {{ include "assemblyline.nodeAffinity" . | indent 10 }}
      containers:
        - name: redis
          image: {{ .Values.redisImage }}
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              redis-server --appendonly no \
                          --maxclients 100000 \
                          --save "" \
                          --io-threads $REDIS_IO_THREADS \
            {{- if .Values.enableInternalEncryption }}
                          --tls-port $REDIS_TLS_PORT \
                          --port $REDIS_PORT \
                          --tls-cert-file $REDIS_TLS_CERT_FILE \
                          --tls-key-file $REDIS_TLS_KEY_FILE \
                          --tls-ca-cert-file $REDIS_TLS_CA_CERT_FILE \
                          --tls-auth-clients $REDIS_TLS_AUTH_CLIENTS \
            {{- end }}
          imagePullPolicy: Always
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: {{ .Values.redisVolatileReqCPU }}
              memory: {{ .Values.redisVolatileReqRam }}
            limits:
              cpu: {{ .Values.redisVolatileLimCPU }}
              memory: {{ .Values.redisVolatileLimRam }}
          env:
            {{- if ne (.Values.redisVolatileIOThreads | toString) "1" }}
            - name: REDIS_IO_THREADS
              value: "{{ .Values.redisVolatileIOThreads }}"
            {{- end }}
            {{- if .Values.enableInternalEncryption }}
            - name: REDIS_TLS_PORT
              value: "6379"
            - name: REDIS_PORT
              value: "0"
            - name: REDIS_TLS_CERT_FILE
              value: "/etc/tls/{{ default "tls" .Values.tlsSecretProvider.tlsObjectName }}.crt"
            - name: REDIS_TLS_KEY_FILE
              value: "/etc/tls/{{ default "tls" .Values.tlsSecretProvider.tlsObjectName }}.key"
            - name: REDIS_TLS_CA_CERT_FILE
              value: "/etc/tls/{{ default "root-ca" .Values.tlsSecretProvider.tlsObjectName }}.crt"
            - name: REDIS_TLS_AUTH_CLIENTS
              value: "no"
            - name: DATASTORE_VERIFY_CERTS
              value: "false"
            {{- end }}
          readinessProbe:
            exec:
              command: ['bash', '-c', 'if [ "$(timeout 3s redis-cli {{ if .Values.enableInternalEncryption}}--tls --cacert $REDIS_TLS_CA_CERT_FILE {{ end }}ping)" != "PONG" ]; then exit 1; fi']
            timeoutSeconds: 5
            periodSeconds: 5
{{ if and .Values.enableInternalEncryption .Values.useSharedTLSCert}}
          volumeMounts:
            - name: redis-cert
              mountPath: /etc/tls
      volumes:
        - name: redis-cert
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.tlsSecretProvider.className }}
{{ else if .Values.enableInternalEncryption }}
          volumeMounts:
            - name: redis-cert
              mountPath: /etc/tls
            - name: root-cert
              subPath: tls.crt
              mountPath: /etc/root-ca.crt
      volumes:
        - name: redis-cert
          secret:
            secretName: redis-volatile-cert
        - name: root-cert
          secret:
            secretName: {{ .Release.Name }}.internal-generated-ca
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-volatile
  labels:
    app: assemblyline
    section: core
    component: redis-volatile
spec:
  clusterIP: None
  selector:
    app: assemblyline
    section: core
    component: redis-volatile
  ports:
  - protocol: TCP
    port: 6379
---
# Create a StatefulSet/Service for persistent redis
apiVersion: v1
kind: Service
metadata:
  name: redis-persistent
  labels:
    app: assemblyline
    section: core
    component: redis-persistent
spec:
  clusterIP: None
  selector:
    app: assemblyline
    section: core
    component: redis-persistent
  ports:
  - protocol: TCP
    port: 6379
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-persistent
spec:
  selector:
    matchLabels:
      app: assemblyline
      section: core
      component: redis-persistent
  serviceName: redis-persistent
  replicas: 1
  template:
    metadata:
      labels:
        app: assemblyline
        section: core
        component: redis-persistent
    spec:
      terminationGracePeriodSeconds: 10
      priorityClassName: al-infra
      affinity:
        nodeAffinity:
          {{ include "assemblyline.nodeAffinity" . | indent 10 }}
      containers:
      - name: redis
        image: {{ .Values.redisImage }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            redis-server --appendonly yes \
                        --maxclients 100000 \
                        --auto-aof-rewrite-percentage 200 \
                        --io-threads $REDIS_IO_THREADS \
                        --tls-port $REDIS_TLS_PORT \
                        --port $REDIS_PORT \
          {{- if .Values.enableInternalEncryption }}
                        --tls-cert-file $REDIS_TLS_CERT_FILE \
                        --tls-key-file $REDIS_TLS_KEY_FILE \
                        --tls-ca-cert-file $REDIS_TLS_CA_CERT_FILE \
                        --tls-auth-clients $REDIS_TLS_AUTH_CLIENTS \
          {{- end }}
        env:
          - name: REDIS_IO_THREADS
            value: {{ default "1" .Values.redisPersistentIOThreads | quote }}
          - name: REDIS_TLS_PORT
            value: "6379"
          - name: REDIS_PORT
            value: "0"
          {{- if .Values.enableInternalEncryption }}
          - name: REDIS_TLS_CERT_FILE
            value: "/etc/tls/{{ default "tls" .Values.tlsSecretProvider.tlsObjectName }}.crt"
          - name: REDIS_TLS_KEY_FILE
            value: "/etc/tls/{{ default "tls" .Values.tlsSecretProvider.tlsObjectName }}.key"
          - name: REDIS_TLS_CA_CERT_FILE
            value: "/etc/tls/{{ default "root-ca" .Values.tlsSecretProvider.tlsObjectName }}.crt"
          - name: REDIS_TLS_AUTH_CLIENTS
            value: "no"
          {{- end }}
        ports:
        - containerPort: 6379
        readinessProbe:
          exec:
            command: ['bash', '-c', 'if [ "$(timeout 3s redis-cli {{ if .Values.enableInternalEncryption}}--tls --cacert $REDIS_TLS_CA_CERT_FILE {{ end }}ping)" != "PONG" ]; then exit 1; fi']
          timeoutSeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /var/opt/redislabs/
        - name: redis-data
          mountPath: /data
        {{ if and .Values.enableInternalEncryption .Values.useSharedTLSCert}}
        - name: redis-cert
          mountPath: /etc/tls
        {{ else if .Values.enableInternalEncryption }}
        - name: redis-cert
          mountPath: /etc/tls
        - name: root-cert
          subPath: tls.crt
          mountPath: /etc/root-ca.crt
        {{ end }}
        resources:
          limits:
            cpu: {{ .Values.redisPersistentLimCPU }}
            memory: {{ .Values.redisPersistentLimRam }}
          requests:
            cpu: {{ .Values.redisPersistentReqCPU }}
            memory: {{ .Values.redisPersistentReqRam }}
{{ if and .Values.enableInternalEncryption .Values.useSharedTLSCert}}
      volumes:
        - name: redis-cert
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.tlsSecretProvider.className }}
{{ else if .Values.enableInternalEncryption }}
      volumes:
        - name: redis-cert
          secret:
            secretName: redis-persistent-cert
        - name: root-cert
          secret:
            secretName: {{ .Release.Name }}.internal-generated-ca
{{ end }}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.redisStorageClass }}
      resources:
        requests:
          storage: {{ .Values.redisStorageSize | default "20Gi" }}
