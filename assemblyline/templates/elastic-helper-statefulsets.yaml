apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elastic-helper
spec:
  selector:
    matchLabels:
      app: assemblyline
      section: core
      component: elastic-helper
  serviceName: elastic-helper
  replicas: 1
  template:
    metadata:
      labels:
        app: assemblyline
        section: core
        component: elastic-helper
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: {{ .Values.coreServiceAccountName }}
      priorityClassName: al-infra
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      affinity:
        nodeAffinity:
          {{ include "assemblyline.nodeAffinity" . | indent 10 }}
      containers:
      - name: elastic-helper
        image: {{ .Values.assemblylineUIImage }}:{{ .Values.release }}
        command: ["python",  "/mount/share_certificate.py"]
        ports:
        - containerPort: 8000
        env:
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: elastic-helper-secret
                key: password
        volumeMounts:
        - name: certificate-data
          mountPath: /data/
        - name: script-volume
          mountPath: /mount
        - name: elastic-certificates
          mountPath: /usr/share/elasticsearch/config/certs
          readOnly: false
        resources:
          limits:
            cpu: {{ .Values.elasticHelperLimCPU }}
            memory: {{ .Values.elasticHelperLimRam }}
          requests:
            cpu: {{ .Values.elasticHelperReqCPU }}
            memory: {{ .Values.elasticHelperReqRam }}
      initContainers:
      - name: create-certs
        image: {{ .Values.datastore.image }}:{{ .Values.datastore.imageTag }}
        command: [
          'bash',
          '-c',
          "echo 'Cleaning up existing certificates...' && \
          rm -f /data/elastic-* && \
          echo 'Listing certs directory after cleanup:' && \
          ls -la /usr/share/elasticsearch/config/certs/ && \
          echo 'Creating new PKCS#12 truststore...' && \
          openssl pkcs12 -export \
          -inkey /usr/share/elasticsearch/config/certs/assemblyline-tls-certificate.key \
          -in /usr/share/elasticsearch/config/certs/assemblyline-tls-certificate.crt \
          -out /data/elastic-certificates.p12 \
          -passout pass: && \
          echo 'Creating PKCS#12 file for just the CA certificate directly from the truststore...' && \
          openssl pkcs12 \
          -in /data/elastic-certificates.p12 \
          -out /data/elastic-stack-ca.p12 \
          -cacerts \
          -nokeys \
          -passin pass: \
          -passout pass: && \
          echo 'New truststore contents:' && \
          ls -la /data/; \
          "
        ]
        resources:
          limits:
            cpu: {{ .Values.elasticHelperLimCPU }}
            memory: {{ .Values.elasticHelperLimRam }}
          requests:
            cpu: {{ .Values.elasticHelperReqCPU }}
            memory: {{ .Values.elasticHelperReqRam }}
        volumeMounts:
          - name: certificate-data
            mountPath: /data/
          - name: script-volume
            mountPath: /mount/
          - name: elastic-certificates
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: false
      volumes:
        - name: script-volume
          configMap:
            name: {{ .Release.Name }}-bootstrap-script
            items:
              - key: share_certificate.py
                path: share_certificate.py
        - name: elastic-certificates
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.tlsSecretProvider.className }}
  volumeClaimTemplates:
  - metadata:
      name: certificate-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.persistantStorageClass }}
      resources:
        requests:
          storage: 1Gi
