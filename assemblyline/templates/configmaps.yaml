# {{ required "A configuration.filestore.cache URI needs to be define. See assemblyline manual." .Values.configuration.filestore.cache }}
# {{ required "A configuration.filestore.storage URI needs to be define. See assemblyline manual." .Values.configuration.filestore.storage }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-indexes
data:
  elastic-default-replicas: "{{ .Values.elasticDefaultReplicas }}"
  elastic-default-shards: "{{ .Values.elasticDefaultShards }}"
  elastic-file-shards: "{{ .Values.elasticFileShards }}"
  elastic-result-shards: "{{ .Values.elasticResultShards }}"
  elastic-submission-shards: "{{ .Values.elasticSubmissionShards }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: system-settings
data:
  logging-host: {{ if .Values.internalLogging }}log-storage-master:9200{{ else }}{{ .Values.loggingHost }}{{ end }}
  logging-username: {{ if .Values.internalLogging }}elastic{{ else }}{{ .Values.loggingUsername }}{{ end }}
  logging-tls-verify: {{ .Values.loggingTLSVerify }}
  metricbeat-index-prefix: {{ .Values.metricbeatIndexPrefix }}

---
# The assemblyline config that will be projected into all the assemblyline pods
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-global-config
data:
  config: |
{{ .Values.configuration | toYaml | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-bootstrap-script
data:
  bootstrap.py: |
    from assemblyline.odm.models.user_settings import UserSettings
    from assemblyline.common.security import get_password_hash
    from assemblyline.odm.models.user import User
    from assemblyline.common import forge
    import os

    ADMIN_USER = 'admin'
    INITIAL_ADMIN_PASSWORD = os.environ['INITIAL_ADMIN_PASSWORD']

    if __name__ == '__main__':
        ds = forge.get_datastore()
        if not ds.user.get_if_exists(ADMIN_USER):
            user_data = User({
                "agrees_with_tos": "NOW",
                "classification": "RESTRICTED",
                "name": "Administrator",
                "password": get_password_hash(INITIAL_ADMIN_PASSWORD),
                "uname": ADMIN_USER,
                "type": [ADMIN_USER, "user", "signature_importer"]})
            ds.user.save(ADMIN_USER, user_data)
            ds.user_settings.save(ADMIN_USER, UserSettings())
            print("Initial user setup finished.")
        else:
            print(f"User {ADMIN_USER} already found, system is already setup.")
  share_certificate.py: |
    import os
    import logging
    from flask import Flask, request, abort

    app = Flask(__name__)

    FILES = {
        'elastic-certificates.p12': '/data/elastic-certificates.p12',
        'elastic-stack-ca.p12': '/data/elastic-stack-ca.p12'
    }

    @app.route("/<filename>")
    def read_file(filename):
        if request.headers.get('Authorization', '') != 'Bearer ' + os.environ['SECRET_KEY']:
            abort(401, 'token refused')

        if filename not in FILES:
            abort(404)

        return open(FILES[filename], 'rb').read()

    if __name__ == "__main__":
        logging.basicConfig(level=logging.INFO)
        app.run(ssl_context='adhoc', host='0.0.0.0', port=8000)
