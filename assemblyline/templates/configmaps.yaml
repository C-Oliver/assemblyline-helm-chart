{{ required "A filestore URI needs to be define. See assemblyline manual." .Values.configuration.filestore.cache }}
{{ required "A filestore URI needs to be define. See assemblyline manual." .Values.configuration.filestore.storage }}
{{ required "Set a storage class for persisted redis data." .Values.redisStorageClass }}
{{ required "Set a RWX storage class for sharing updates with service containers." .Values.updateStorageClass }}
{{ required "Set a RWX storage class for sharing information inside core services." .Values.sharedStorageClass }}


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: system-settings
data:
  logging-host: {{ if .Values.internalLogging }}log-storage-master:9200{{ else }}{{ .Values.loggingHost }}{{ end }}
  logging-username: {{ if .Values.internalLogging }}elastic{{ else }}{{ .Values.loggingUsername }}{{ end }}
  logging-tls-verify: {{ .Values.loggingTLSVerify }}
  metricbeat-index-prefix: {{ .Values.metricbeatIndexPrefix }}

---
# The assemblyline config that will be projected into all the assemblyline pods
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-global-config
data:
  config: |
{{ .Values.configuration | toYaml | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-bootstrap-script
data:
  bootstrap.py: |
    from assemblyline.odm.models.user_settings import UserSettings
    from assemblyline.common.security import get_password_hash
    from assemblyline.odm.models.user import User
    from assemblyline.common import forge
    import os

    ADMIN_USER = 'admin'
    INITIAL_ADMIN_PASSWORD = os.environ['INITIAL_ADMIN_PASSWORD']

    if __name__ == '__main__':
        ds = forge.get_datastore()
        if not ds.user.get_if_exists(ADMIN_USER):
            user_data = User({
                "agrees_with_tos": "NOW",
                "classification": "RESTRICTED",
                "name": "Admin user",
                "password": get_password_hash(INITIAL_ADMIN_PASSWORD),
                "uname": ADMIN_USER,
                "type": [ADMIN_USER, "user", "signature_importer"]})
            ds.user.save(ADMIN_USER, user_data)
            ds.user_settings.save(ADMIN_USER, UserSettings())
            print("Initial user setup finished.")
        else:
            print(f"User {ADMIN_USER} already found, system is already setup.")
