
coreVersion: '4.0.0'
uiVersion:   '4.0.0'
sapiVersion:   '4.0.0'

redisStorageClass: default
sharedStorageClass: default
createAdminAccount: false

loggingHost:
loggingUsername: "elastic"

tlsSecretName:
ingressAnnotations: {}
ingressHost:

autoInstallServices:
  - apkaye
  - characterize
  - cleaver
  - cuckoo
  - espresso
  - extract
  - floss
  - iparse
  - metadefender
  - metapeek
  - oletools
  - pdfid
  - peepdf
  - pefile
  - suricata
  - swiffer
  - torrentslicer
  - unpacker
  - vipermonkey
  - virustotal-dynamic
  - virustotal-static
  - yara

coreEnv: []
coreMounts: []
coreVolumes: []

configuration:
  core:
    alerter:
      delay: 0
    metrics:
      elasticsearch:
        hosts: ["http://${LOGGING_USERNAME}:${LOGGING_PASSWORD}@${LOGGING_HOST}"]
      redis:
        host: redis-volatile
        port: 6379
    redis:
      nonpersistent:
        host: redis-volatile
        port: 6379
      persistent:
        host: redis-persistent
        port: 6379
    scaler:
      service_defaults:
        backlog: 10
        min_instances: 1
        growth: 60
        shrink: 20
        environment:
          - name: 'SERVICE_API_HOST'
            value: 'http://service-server:5003'
  datastore:
    hosts: ["http://elastic:${ELASTIC_PASSWORD}@datastore-master:9200"]
  filestore:
    cache:
    storage:
  logging:
    log_to_console: true
    log_to_file: false
    log_to_syslog: false
  ui:
    fqdn: "localhost"


datastore:
  clusterName: "datastore"
  replicas: 3
  extraEnvs:
    - name: ELASTIC_USERNAME
      value: elastic
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: assemblyline-system-passwords
          key: datastore-password
  labels:
    section: core
    component: datastore
  protocol: http
  esJavaOpts: '-Xms4g -Xmx4g'
  esConfig:
    elasticsearch.yml: |
      logger.level: WARN
      xpack.security.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.enabled: false
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
  resources:
    requests:
      cpu: 1
      memory: 5Gi
    limits:
      cpu: 4
      memory: 6Gi
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: default
    resources:
      requests:
        storage: 500Gi
  priorityClassName: 'al-infra'
  extraInitContainers: |
    - name: create-certs
      image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
      command: ['bash', '-c', "if [ ! -f /data/elastic-certificates.p12 ]; then mkdir /tmp/certs/ && elasticsearch-certutil ca --out /tmp/certs/elastic-stack-ca.p12 --pass '' && elasticsearch-certutil cert --name security-master --dns security-master --ca /tmp/certs/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /tmp/certs/elastic-certificates.p12 && mv -n /tmp/certs/* /data/; fi"]
      volumeMounts:
        - name: elastic-certificates
          mountPath: /data/
  extraVolumes: |
    - name: elastic-certificates
      persistentVolumeClaim:
        claimName: update-directory
  extraVolumeMounts: |
    - name: elastic-certificates
      mountPath: /usr/share/elasticsearch/config/certs

filebeat:
  labels:
    section: core
    component: filebeat
  extraEnvs:
    - name: ELASTICSEARCH_HOSTS
      valueFrom:
        configMapKeyRef:
          name: system-settings
          key: logging-host
    - name: ELASTICSEARCH_USERNAME
      valueFrom:
        configMapKeyRef:
          name: system-settings
          key: logging-username
    - name: ELASTICSEARCH_PASSWORD
      valueFrom:
        secretKeyRef:
          name: assemblyline-system-passwords
          key: logging-password
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  filebeatConfig:
    filebeat.yml: |-
      logging:
        level: warning
        json: true
      name: ${NODE_NAME}

      filebeat.inputs:
        - type: container
          format: docker
          paths:
            - '/var/lib/docker/containers/*/*.log'
          stream: "all"
          json:
            keys_under_root: true
            message_key: message
            ignore_decoding_error: true
          processors:
            - rename:
                fields:
                  - from: "error"
                    to: "error.message"
                ignore_missing: true
            - script:
                lang: javascript
                id: log_level
                source: >
                  function process(event) {
                      var value = event.Get("log.level");
                      if (value === null){
                        value = "INFO"
                      }
                      else if (value.toLowerCase() == "warn"){
                        value = "WARNING"
                      }
                      else if (value.toLowerCase() == "err"){
                        value = "ERROR"
                      }
                      event.Put("log.level", value.toUpperCase());
                  }

      processors:
        - add_cloud_metadata: ~
        - add_host_metadata: ~
        - add_docker_metadata: ~
        - add_kubernetes_metadata: ~
        - drop_event:
            when:
              regexp:
                container.labels.io_kubernetes_container_name: "(nginx-ingress-controller)|(tunnel-front)"

      output.elasticsearch:
        hosts: ['${ELASTICSEARCH_HOSTS:elasticsearch}']
        username: ${ELASTICSEARCH_USERNAME}
        password: ${ELASTICSEARCH_PASSWORD}

      setup.template.settings:
        index.number_of_shards: 1
        index.number_of_replicas: 0
      setup.ilm:
        enabled: true
        policy_file: /usr/share/filebeat/filebeat_policy.json
    filebeat_policy.json: |-
      {
        "policy": {
          "phases": {
            "hot": {
              "min_age": "0ms",
              "actions": {
                "rollover": {
                  "max_age": "1d",
                  "max_size": "20gb"
                },
                "set_priority": {
                  "priority": 100
                }
              }
            },
            "warm": {
              "actions": {
                "readonly": {},
                "set_priority": {
                  "priority": 50
                }
              }
            },
            "delete": {
              "min_age": "3d",
              "actions": {
                "delete": {}
              }
            }
          }
        }
      }

metricbeat:
  labels:
    section: core
    component: metricbeat
  extraEnvs:
    - name: ELASTICSEARCH_HOSTS
      valueFrom:
        configMapKeyRef:
          name: system-settings
          key: logging-host
    - name: ELASTICSEARCH_USERNAME
      valueFrom:
        configMapKeyRef:
          name: system-settings
          key: logging-username
    - name: ELASTICSEARCH_PASSWORD
      valueFrom:
        secretKeyRef:
          name: assemblyline-system-passwords
          key: logging-password
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  metricbeatConfig:
    # Configuration on the daemonset
    metricbeat.yml: |
      logging:
        level: warning
        json: true
      name: ${NODE_NAME}

      metricbeat.modules:
        - module: system
          period: 10s
          metricsets:
            - cpu
            - load
            - memory
            - network
            - process
            - process_summary
            - uptime
            - socket_summary
            - socket
          processes: [".*"]
          cpu.metrics:  ["percentages"]
          core.metrics: ["percentages"]
          process.include_top_n:
            by_cpu: 5      # include top 5 processes by CPU
            by_memory: 5   # include top 5 processes by memory
        - module: system
          period: 1m
          metricsets:
            - diskio
            - fsstat
        - module: docker
          metricsets:
            - "container"
            - "cpu"
            - "diskio"
            - "event"
            - "healthcheck"
            - "info"
            - "memory"
            - "network"
          hosts: ["unix:///var/run/docker.sock"]
          period: 10s
          enabled: true
          processors:
            - add_docker_metadata: ~
        - module: kubernetes
          metricsets:
            - node
            - system
            - pod
            - container
            - volume
          period: 10s
          host: ${NODE_NAME}
          hosts: ["localhost:10255"]

      processors:
        - add_cloud_metadata: ~

      output.elasticsearch:
        hosts: ["${ELASTICSEARCH_HOSTS}"]
        username: ${ELASTICSEARCH_USERNAME}
        password: ${ELASTICSEARCH_PASSWORD}

      setup.template.settings:
        index.number_of_shards: 1
        index.number_of_replicas: 0
      setup.ilm:
        enabled: true
        policy_file: /usr/share/metricbeat/metricbeat_policy.json
    # Configuration on the deployment
    kube-state-metrics-metricbeat.yml: |
      logging:
        level: warning
        json: true
      name: ${NODE_NAME}

      metricbeat.modules:
        - module: redis
          metricsets:
            - "info"
            - "keyspace"
          period: 10s
          hosts: ["redis-volatile:6379"]
        - module: redis
          metricsets:
            - "info"
            - "keyspace"
          period: 10s
          hosts: ["redis-persistent:6379"]

      processors:
        - add_cloud_metadata: ~

      output.elasticsearch:
        hosts: ["${ELASTICSEARCH_HOSTS}"]
        username: ${ELASTICSEARCH_USERNAME}
        password: ${ELASTICSEARCH_PASSWORD}

      setup.template.settings:
        index.number_of_shards: 1
        index.number_of_replicas: 0
      setup.ilm:
        enabled: true
        policy_file: /usr/share/metricbeat/metricbeat_policy.json

    metricbeat_policy.json: |-
      {
        "policy": {
          "phases": {
            "hot": {
              "min_age": "0ms",
              "actions": {
                "rollover": {
                  "max_age": "1d",
                  "max_size": "5gb"
                },
                "set_priority": {
                  "priority": 100
                }
              }
            },
            "warm": {
              "actions": {
                "readonly": {},
                "set_priority": {
                  "priority": 50
                }
              }
            },
            "delete": {
              "min_age": "4d",
              "actions": {
                "delete": {}
              }
            }
          }
        }
      }
