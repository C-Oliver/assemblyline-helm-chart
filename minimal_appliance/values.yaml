# Set the default storage classes for microk8s 
redisStorageClass: microk8s-hostpath
updateStorageClass: microk8s-hostpath
persistantStorageClass: microk8s-hostpath

# Turn off replication since there is only one elastic node
elasticDefaultReplicas: 0

# Turn off metrics and logs gathering to saved on processing power
#    NOTE: this could be turned back on if the appliance node is powerful enough
loggingAndMetrics: false

# Turn off Application performance metrics to save processing power
#    NOTE: this could be turned back on if you need insight on the performance of
#          the core components
enableAPM: false

# Turn off self contained ELK stack for logging and metrics
internalLogging: false

# Make sure we use the same elasticsearch DB for logging and data when 
# internal logging is turned on
seperateInternalLogging: false
loggingHost: datastore-master:9200

kibana:
  elasticsearchHosts: http://datastore-master:9200

# Overwrites storage size for update-directory to save on space
updateStorageSize: 20Gi

# Stop reseving CPU for component
defaultReqCPU: "0m"
alerterReqCPU: "0m"
apmReqCPU: "0m"
dispatcherReqCPU: "0m"
elasticHelperReqCPU: "0m"
esMetricsReqCPU: "0m"
expiryReqCPU: "0m"
frontendReqCPU: "0m"
heartbeatReqCPU: "0m"
internalUIReqCPU: "0m"
ingestUIReqCPU: "0m"
ingesterReqCPU: "0m"
logstashReqCPU: "0m"
metricsReqCPU: "0m"
plumberReqCPU: "0m"
redisVolatileReqCPU: "0m"
redisPersistentReqCPU: "0m"
scalerReqCPU: "0m"
serviceServerReqCPU: "0m"
socketIOReqCPU: "0m"
statisticsReqCPU: "0m"
uiReqCPU: "0m"
updaterReqCPU: "0m"
workflowReqCPU: "0m"

# No need to provide internal NFS since all pods will write to the same server
internalNFS: false

# Internal configuration for assemblyline components. See the assemblyline
# administration documentation for more details.
# https://cybercentrecanada.github.io/assemblyline4_docs/
configuration:
  core:
    scaler:
      service_defaults:
        min_instances: 0
    services:
      cpu_reservation: 0
  ui:
    fqdn: "localhost"

# No need to load the elastic-helper container since there is only one node
useElasticHelper: false

# Configuration for the elasticsearch instance used for system data.
# Values an administrator is likely to want to change to scale their deployment are:
#     replicas
#     resources
#     volumeClaimTemplate
datastore:
  replicas: 1
  esJavaOpts: '-Xms2g -Xmx2g'
  resources:
    requests:
      memory: 2Gi
    limits:
      memory: 4Gi
  volumeClaimTemplate:
    storageClassName: microk8s-hostpath
    resources:
      requests:
        storage: 20Gi
  extraInitContainers: |
    - name: create-certs
      image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
      command: [ 'bash', '-c', "if [ ! -f /data/elastic-certificates.p12 ]; then mkdir /tmp/certs/ && elasticsearch-certutil ca --out /tmp/certs/elastic-stack-ca.p12 --pass '' && elasticsearch-certutil cert --name security-master --dns security-master --ca /tmp/certs/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /tmp/certs/elastic-certificates.p12 && mv -n /tmp/certs/* /data/; ls -la /data/; fi" ]
      volumeMounts:
        - name: elastic-certificates
          mountPath: /data/

# Configuration for the file storage
# Values an administrator is likely to want to change to scale their deployment are:
#     persistence
filestore:
  persistence:
    size: 20Gi
    StorageClass: microk8s-hostpath
  resources:
    requests:
      memory: 2Gi
    limits:
      memory: 4Gi